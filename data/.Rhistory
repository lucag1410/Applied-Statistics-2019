# CREATION OF ONE DATASET FOR EACH DIPHTONG, FOR EACH SPEAKER
data.aI_female = speech_data[indices_aI_female]
data.aI_male = speech_data[indices_aI_male]
data.aU_female = speech_data[indices_aU_female]
data.aU_male = speech_data[indices_aU_male]
data.OY_female = speech_data[indices_OY_female]
data.OY_male = speech_data[indices_OY_male]
# creation of the "average" formant T_AVG
T_AVG = c()
for (i in 1:length(speech_data$data[,1])){
T_AVG = c(T_AVG, mean(speech_data$data[i,]))
}
# TODO: the following rows are pretty inefficient,try to change these lines
temp = speech_data # temp used to preserve our dataset
temp$data = cbind(speech_data$data, T_AVG)
avg_formant_data = temp[,5]
rm(temp) # remove temp since we don't need it anymore
#--------------------------------------------------------------------------------
# ratio_F2_F1 is a vector containing the ratio F2/F1 on all the observations (not samples)
ratio_F2_F1 = c()
for (i in 1:length(speech_data$data[,1])){
ratio_i = speech_data$data[i,2] / speech_data$data[i,1]
ratio_F2_F1 = c(ratio_F2_F1, ratio_i)
}
# TODO: the following rows are pretty inefficient,try to change these lines
temp = speech_data # temp used to preserve our dataset
temp$data = cbind(speech_data$data, ratio_F2_F1)
ratio_F2_F1_data = temp[,5]
rm(temp) # remove temp since we don't need it anymore
### plot ratio F2/F1 for a given case (set "chosen_index" to the indices that you want)
library(colorspace)
chosen_indices = indices_OY
x11()
plot(x = c(0, max(ratio_F2_F1_data$index[,2] - ratio_F2_F1_data$index[,1])),
y = c(0, max(ratio_F2_F1_data$data)), type='n',
xlab = 'time', ylab = 'Ratio F2/F1',
main = paste('Ratio F2/F1 for diph. ', unique(dip.l[chosen_indices]), 'both spkrs'))
for (i in chosen_indices){
rand_color = sample(1:length(color), 1)
points(ratio_F2_F1_data[i,]$data, col = rand_color, pch = 19)
lines(ratio_F2_F1_data[i,]$data, col = rand_color)
}
x11()
plot(ratio_F2_F1_data[chosen_indices[chosen_indices<=93],]$data,
xlab = 'Index', ylab = 'Ratio F2/F1',
main = c('Ratio F2/F1 for diph. ', unique(dip.l[chosen_indices]), 'spkr F'),
col = rainbow(n = 300), pch = 19)
### plot of avg formant
x11()
dplot(avg_formant_data,
dip$labels,
normalise = TRUE,
xlab = "Normalized Time [%]",
ylab = "Avg Formant [Hz]", col=rainbow(3),lwd=1.1,main='Average formant',lty=factor(dip.spkr))
#------------------------------------------------------------------------------------------
# creation of dataframe with summary statistics for the diphtongs, for females and for males
# I considered only the avg_formant_dataset but we can add columns also for each formant
df_avg_female = data.frame(
row.names = diphtongs_names,
"Mean" = c(mean(avg_formant_data$data[indices_aI_female]),
mean(avg_formant_data$data[indices_aU_female]),
mean(avg_formant_data$data[indices_OY_female])
),
"Std" = c(sd(avg_formant_data$data[indices_aI_female]),
sd(avg_formant_data$data[indices_aU_female]),
sd(avg_formant_data$data[indices_OY_female])
),
"Max" = c(max(avg_formant_data$data[indices_aI_female]),
max(avg_formant_data$data[indices_aU_female]),
max(avg_formant_data$data[indices_OY_female])
),
"Min" = c(min(avg_formant_data$data[indices_aI_female]),
min(avg_formant_data$data[indices_aU_female]),
min(avg_formant_data$data[indices_OY_female])
)
)
df_avg_male = data.frame(
row.names = diphtongs_names,
"Mean" = c(mean(avg_formant_data$data[indices_aI_male]),
mean(avg_formant_data$data[indices_aU_male]),
mean(avg_formant_data$data[indices_OY_male])
),
"Std" = c(sd(avg_formant_data$data[indices_aI_male]),
sd(avg_formant_data$data[indices_aU_male]),
sd(avg_formant_data$data[indices_OY_male])
),
"Max" = c(max(avg_formant_data$data[indices_aI_male]),
max(avg_formant_data$data[indices_aU_male]),
max(avg_formant_data$data[indices_OY_male])
),
"Min" = c(min(avg_formant_data$data[indices_aI_male]),
min(avg_formant_data$data[indices_aU_male]),
min(avg_formant_data$data[indices_OY_male])
)
)
# the matrices are overall very similar, except for the Std of aU, which is way larger for the males
#--------------------------------------------------------------------------------
# creation of vector with mean value of the avg_formant for each sample
# basically this vector contains the mean value of each line in the avg_formant graph
# use the indices in order to have more specific information (e.g. mean_samples_avg_formant[indices_aI])
mean_samples_avg_formant = c()
for (i in 1:186){
mean_samples_avg_formant = c(mean_samples_avg_formant, mean(avg_formant_data[i]$data))
}
### plot of mean values for all the samples (ignore the warning messages in the console)
# there is a clear distinction between the speakers
# NB the indices goes from 1 to 118 (the number of aI samples)
# I don't think that this is an issue since we are interested in the differences on the y-axis
x11()
plot(mean_samples_avg_formant[indices_aI], col = 'red', pch = 19, ylim = c(1500, max(mean_samples_avg_formant)), ylab = 'Mean sample value from T_AVG')
legend(0, max(mean_samples_avg_formant), legend=c('aI', 'aU', 'OY'), col=c("red", 'green', "blue"), lty = 1, cex = 1)
points(mean_samples_avg_formant[indices_aU], col = 'green', pch = 19)
points(mean_samples_avg_formant[indices_OY], col = 'blue', pch = 19)
### TODO: there is something wrong when plotting the data using specific indices
### I think that this is due to the fact that I still used dip$labels and not dip$"male labels", for example
#----------------------------------------------------------------------------------
### creation of complete matrix with all the information from dip.fdat and dip
library(dplyr) # for operations on dataframes
library(plyr)  # for vectors handling
# see this link for explanations on the package dplyr: https://www.datanovia.com/en/lessons/subset-data-frame-rows-in-r/
num_observations = length(dip.fdat[,1]$data)
#create diphtong labels vector with 5462 values
diph_vect = c()
for (i in 1:num_of_samples){
label_i = dip$labels[i]
diph_vect = c(diph_vect, rep(label_i, length(dip.fdat[i,]$data)/4))
}
#create speaker vector with 5462 values ('F' for female, 'M' for Male)
spkr_vect = c()
for (i in 1:num_of_samples){
spkr_i = ifelse(dip.spkr[i] == '67', 'M', 'F')
spkr_vect = c(spkr_vect, rep(spkr_i, length(dip.fdat[i,]$data)/4))
}
#create samples vector with 5462 values
sample_vect = c()
for (i in 1:num_of_samples){
sample_vect = c(sample_vect, rep(i, length(dip.fdat[i,]$data)/4))
}
sample_vect = type.convert(sample_vect)
#creation of the dataframe, we can add more columns with df_complete['newcolumn_name'] = new_column
df_complete = data.frame(
row.names = c(1:num_observations),
'sample' = sample_vect,
'observation' = c(1:num_observations),
'time' = times,
'diphtong' = diph_vect,
'speaker' = spkr_vect,
'T1' = dip.fdat[,1]$data,
'T2' = dip.fdat[,2]$data,
'T3' = dip.fdat[,3]$data,
'T4' = dip.fdat[,4]$data
)
### creation of temporary sub-dataframes in order to create the dataframe without zeros
df_aI_female = df_complete %>% filter(diphtong == 'aI', speaker == 'F')
df_aU_female = df_complete %>% filter(diphtong == 'aU', speaker == 'F')
df_OY_female = df_complete %>% filter(diphtong == 'OY', speaker == 'F')
df_aI_male = df_complete %>% filter(diphtong == 'aI', speaker == 'M')
df_aU_male = df_complete %>% filter(diphtong == 'aU', speaker == 'M')
df_OY_male = df_complete %>% filter(diphtong == 'OY', speaker == 'M')
# for each formant find mean for each pair speaker, dipthong and replace the values in the correct sub-df
for (i in 1:num_of_formants){
# compute the means..
mean_aI_female = mean((df_complete %>% filter(speaker == 'F', diphtong == 'aI') %>% select(i+5))[,1])
mean_aU_female = mean((df_complete %>% filter(speaker == 'F', diphtong == 'aU') %>% select(i+5))[,1])
mean_OY_female = mean((df_complete %>% filter(speaker == 'F', diphtong == 'OY') %>% select(i+5))[,1])
mean_aI_male = mean((df_complete %>% filter(speaker == 'M', diphtong == 'aI') %>% select(i+5))[,1])
mean_aU_male = mean((df_complete %>% filter(speaker == 'M', diphtong == 'aU') %>% select(i+5))[,1])
mean_OY_male = mean((df_complete %>% filter(speaker == 'M', diphtong == 'OY') %>% select(i+5))[,1])
# .. and replace the zeros with the correct mean
df_aI_female[,i+5] = mapvalues(df_aI_female[,i+5], from= 0, to= mean_aI_female)
df_aU_female[,i+5] = mapvalues(df_aU_female[,i+5], from= 0, to= mean_aU_female)
df_OY_female[,i+5] = mapvalues(df_OY_female[,i+5], from= 0, to= mean_OY_female)
df_aI_male[,i+5] = mapvalues(df_aI_male[,i+5], from= 0, to= mean_aI_male)
df_aU_male[,i+5] = mapvalues(df_aU_male[,i+5], from= 0, to= mean_aU_male)
df_OY_male[,i+5] = mapvalues(df_OY_male[,i+5], from= 0, to= mean_OY_male)
}
# creation of the dataframe without null values
df_complete_noZeros = rbind(df_aI_female, df_aI_male, df_OY_female, df_OY_male, df_aU_female, df_aU_male)
df_complete_noZeros = df_complete_noZeros[order(df_complete_noZeros$observation),]
rownames(df_complete_noZeros) = seq(1,num_observations)
df_complete_noZeros['T2/T1'] = df_complete_noZeros$T2 / df_complete_noZeros$T1
df_complete_noZeros['T_AVG'] = rowMeans(df_complete_noZeros %>% select(T1, T2, T3, T4))
# dataframes for each pair diphtong-speaker without zeros
df_aI_female_noZeros = filter(df_complete_noZeros, diphtong == 'aI', speaker == 'F')
df_aU_female_noZeros = filter(df_complete_noZeros, diphtong == 'aU', speaker == 'F')
df_OY_female_noZeros = filter(df_complete_noZeros, diphtong == 'OY', speaker == 'F')
df_aI_male_noZeros = filter(df_complete_noZeros, diphtong == 'aI', speaker == 'M')
df_aU_male_noZeros = filter(df_complete_noZeros, diphtong == 'aU', speaker == 'M')
df_OY_male_noZeros = filter(df_complete_noZeros, diphtong == 'OY', speaker == 'M')
# plot formant values and means
x11()
plot(df_complete_noZeros$T1, xlab = 'Observation', ylab = 'Formant[Hz]', ylim =  c(0, max(df_complete[,6:9])), col = 'red')
points(df_complete_noZeros$T2, col = 'blue')
points(df_complete_noZeros$T3, col = 'green')
points(df_complete_noZeros$T4, col = 'orange')
abline(h = c(mean(df_complete_noZeros$T1),mean(df_complete_noZeros$T2),mean(df_complete_noZeros$T3),mean(df_complete_noZeros$T4)), col = c('red','blue','green','orange'), lwd = 2)
abline(v = which.max(df_complete_noZeros[,'speaker'] == 'F'))
legend(x = 0, y = 5300, legend = c("T1","T2","T3","T4"), col = c('red','blue','green','orange'), lty = 1)
text(1500,5300, 'Males')
text(3500,5300, 'Females')
### CREATION OF THE SAMPLES SUMMARY DATASET
df_sample = data.frame(
row.names = c(1:num_of_samples),
'sample' = c(1:num_of_samples),
'diphtong' = dip.l,
'speaker' = ifelse(dip.spkr == '67', 'M', 'F')
)
# functions for retrieving the first and the last observations given a sample
get_first_observation <- function(dataset, smpl){
result = dataset %>% filter(sample == smpl)
result = result[1,]
return(result)
}
get_last_observation <- function(dataset, smpl){
result = dataset %>% filter(sample == smpl)
result = tail(result, n=1)
return(result)
}
sample_duration = c()
for (i in 1:num_of_samples){
sample_duration = c(sample_duration,
get_last_observation(df_complete_noZeros, i)$time -
get_first_observation(df_complete_noZeros, i)$time)
}
df_sample['duration'] = sample_duration
T1_min_per_sample = c()
T2_min_per_sample = c()
T1_max_per_sample = c()
T2_max_per_sample = c()
T1_first_per_sample = c()
T2_first_per_sample = c()
T1_last_per_sample = c()
T2_last_per_sample = c()
for (i in 1:num_of_samples){
T1_min_per_sample = c(T1_min_per_sample,
min(df_complete_noZeros[df_complete_noZeros$sample == i,]$T1))
T2_min_per_sample = c(T2_min_per_sample,
min(df_complete_noZeros[df_complete_noZeros$sample == i,]$T2))
T1_max_per_sample = c(T1_max_per_sample,
max(df_complete_noZeros[df_complete_noZeros$sample == i,]$T1))
T2_max_per_sample = c(T2_max_per_sample,
max(df_complete_noZeros[df_complete_noZeros$sample == i,]$T2))
T1_first_per_sample = c(T1_first_per_sample,
get_first_observation(df_complete_noZeros, i)$T1)
T2_first_per_sample = c(T2_first_per_sample,
get_first_observation(df_complete_noZeros, i)$T2)
T1_last_per_sample = c(T1_last_per_sample,
get_first_observation(df_complete_noZeros, i)$T1)
T2_last_per_sample = c(T2_last_per_sample,
get_first_observation(df_complete_noZeros, i)$T2)
}
df_sample['T1_min'] = T1_min_per_sample
df_sample['T2_min'] = T2_min_per_sample
df_sample['T1_max'] = T1_max_per_sample
df_sample['T2_max'] = T2_max_per_sample
df_sample['T1_first'] = T1_first_per_sample
df_sample['T2_first'] = T2_first_per_sample
df_sample['T1_last'] = T1_last_per_sample
df_sample['T2_last'] = T2_last_per_sample
###  CREATION OF NORMALIZED DATASET FOR EACH FORMANT
num_of_interpolations = 60
df_complete_normalized = data.frame(row.names = c(1:(num_of_interpolations*num_of_samples)))
T1_approx = c()
T2_approx = c()
T3_approx = c()
T4_approx = c()
for (i in 1:num_of_samples){
i_T1_approx = approx(df_complete_noZeros[df_complete_noZeros$sample == i,]$T1, n= 60)[2]
i_T2_approx = approx(df_complete_noZeros[df_complete_noZeros$sample == i,]$T2, n= 60)[2]
i_T3_approx = approx(df_complete_noZeros[df_complete_noZeros$sample == i,]$T3, n= 60)[2]
i_T4_approx = approx(df_complete_noZeros[df_complete_noZeros$sample == i,]$T4, n= 60)[2]
for (j in i_T1_approx){
T1_approx = c(T1_approx,j)
}
for (j in i_T2_approx){
T2_approx = c(T2_approx,j)
}
for (j in i_T3_approx){
T3_approx = c(T3_approx,j)
}
for (j in i_T4_approx){
T4_approx = c(T4_approx,j)
}
}
df_complete_normalized['T1'] = T1_approx
df_complete_normalized['T2'] = T2_approx
df_complete_normalized['T3'] = T3_approx
df_complete_normalized['T4'] = T4_approx
df_sample_normalized_T1 = df_sample[,1:3]
df_sample_normalized_T2 = df_sample[,1:3]
df_sample_normalized_T3 = df_sample[,1:3]
df_sample_normalized_T4 = df_sample[,1:3]
for (i in c(1:186)){
df_sample_normalized_T1[i,4:63] = df_complete_normalized[((i-1)*60+1):(i*60),1]
df_sample_normalized_T2[i,4:63] = df_complete_normalized[((i-1)*60+1):(i*60),2]
df_sample_normalized_T3[i,4:63] = df_complete_normalized[((i-1)*60+1):(i*60),3]
df_sample_normalized_T4[i,4:63] = df_complete_normalized[((i-1)*60+1):(i*60),4]
}
df_sample_normalized_T1 = df_sample_normalized_T1[,c(1:3, 4,10,16,22,28,34,40,46,52,58,63)]
df_sample_normalized_T2 = df_sample_normalized_T2[,c(1:3, 4,10,16,22,28,34,40,46,52,58,63)]
df_sample_normalized_T3 = df_sample_normalized_T3[,c(1:3, 4,10,16,22,28,34,40,46,52,58,63)]
df_sample_normalized_T4 = df_sample_normalized_T4[,c(1:3, 4,10,16,22,28,34,40,46,52,58,63)]
colnames(df_sample_normalized_T1) = c('sample','diphtong','speaker','T1_0%','T1_10%','T1_20%','T1_30%','T1_40%',
'T1_50%','T1_60%','T1_70%','T1_80%','T1_90%', 'T1_100%')
colnames(df_sample_normalized_T2) = c('sample','diphtong','speaker','T2_0%','T2_10%','T2_20%','T2_30%','T2_40%',
'T2_50%','T2_60%','T2_70%','T2_80%','T2_90%', 'T2_100%')
colnames(df_sample_normalized_T3) = c('sample','diphtong','speaker','T3_0%','T3_10%','T3_20%','T3_30%','T3_40%',
'T3_50%','T3_60%','T3_70%','T3_80%','T3_90%', 'T3_100%')
colnames(df_sample_normalized_T4) = c('sample','diphtong','speaker','T4_0%','T4_10%','T4_20%','T4_30%','T4_40%',
'T4_50%','T4_60%','T4_70%','T4_80%','T4_90%', 'T4_100%')
x11()
x11()
dplot(speech_data[,2],
dip$labels,
normalise = TRUE,
#ylim = c(0,5500),
xlab = "Normalized Time [%]",
ylab = "1st Formant [Hz]", col=rainbow(3),lwd=1.1,main='First formant',lty=factor(dip.spkr))
x11()
dplot(speech_data[,1:2],
dip$labels,
normalise = TRUE,
#ylim = c(0,5500),
xlab = "Normalized Time [%]",
ylab = "1st Formant [Hz]", col=rainbow(3),lwd=1.1,main='First formant',lty=factor(dip.spkr))
x11()
dplot(speech_data[,1:4],
dip$labels,
normalise = TRUE,
#ylim = c(0,5500),
xlab = "Normalized Time [%]",
ylab = "1st Formant [Hz]", col=rainbow(3),lwd=1.1,main='First formant',lty=factor(dip.spkr))
x11()
dplot(speech_data[,2],
dip$labels,
normalise = TRUE,
#ylim = c(0,5500),
xlab = "Normalized Time [%]",
ylab = "1st Formant [Hz]", col=rainbow(3),lwd=1.1,main='First formant',lty=factor(dip.spkr))
vowlax
v
vowlax.fdat
temp = dip.spkr == '67'
temp
m.l = dip.l[temp]
m.l
m.fdat.5 = dcut(m.l, 0.5, prop = T)
m.fdat = dip.fdat[temp,]
m.fdat.5 = dcut(m.fdat, 0.5, prop = T)
graphics.off()
m.fdat$data
m.fdat.5$data
m.fdat.5
m.fdat.5 = dcut(m.fdat, 0.1, prop = T)
m.fdat.5
m.fdat.5 = dcut(m.fdat, 0, prop = T)
m.fdat.5
m.fdat.5 = dcut(m.fdat, 0.01, prop = T)
m.fdat.5
m.fdat.5 = dcut(m.fdat, 0.1, prop = T)
m.fdat.5
eplot(m.fdat.5[,1:2], m.l, centroid=T, form=T, xlab="F2 (Hz)", ylab="F1 (Hz)")
x11()
eplot(m.fdat.5[,1:2], m.l, centroid=T, form=T, xlab="F2 (Hz)", ylab="F1 (Hz)")
x11()
eplot(m.fdat.5[,1:2], m.l, centroid=T, xlab="F2 (Hz)", ylab="F1 (Hz)")
x11()
eplot(m.fdat.5[,1:2], m.l, centroid=T, form = T, xlab="F2 (Hz)", ylab="F1 (Hz)")
x11()
eplot(m.fdat.5[,1:3], m.l, centroid=T, form = T, xlab="F2 (Hz)", ylab="F1 (Hz)")
x11()
eplot(m.fdat.5[,3:4], m.l, centroid=T, form = T, xlab="F2 (Hz)", ylab="F1 (Hz)")
x11()
eplot(m.fdat.5[,1:2], m.l, centroid=T, form = T, xlab="F2 (Hz)", ylab="F1 (Hz)")
apply(vm.fdat.5[temp,1:2], 2, tapply, m.l[temp], mean)
apply(m.fdat.5[temp,1:2], 2, tapply, m.l[temp], mean)
m.fdat.5 = dcut(m.fdat, 0.5, prop = T)
x11()
eplot(m.fdat.5[,1:2], m.l, centroid=T, form = T, xlab="F2 (Hz)", ylab="F1 (Hz)")
library(emuR)
dip
dip.l
dip.fdat$trackname
help(fda)
install.packages("fda")
help(fda)
??fda
##
## As noted in the Preface to Ramsay, Hooker and Graves (p. v),
## the fda package includes scripts to reproduce all but one of the
## figures in the book.
##
## These figures can be found and run as follows:
##
## Not run:
scriptsDir <- system.file('scripts', package='fda')
Rscripts <- dir(scriptsDir, full.names=TRUE, pattern='R$')
fdarm <- grep('fdarm', Rscripts, value=TRUE)
chapters <- length(fdarm)
# NOTE:  If R fails in any of these scripts,
# this for loop will not end normally,
# and the abnormal termination will be displayed:
for(ch in 1:chapters){
cat('Running', fdarm[ch], '\n')
invisible(source(fdarm[ch]))
}
## End(Not run)
##
## Simple smoothing
##
girlGrowthSm <- with(growth, smooth.basisPar(argvals=age, y=hgtf, lambda=0.1))
plot(girlGrowthSm$fd, xlab="age", ylab="height (cm)",
main="Girls in Berkeley Growth Study" )
plot(deriv(girlGrowthSm$fd), xlab="age", ylab="growth rate (cm / year)",
main="Girls in Berkeley Growth Study" )
plot(deriv(girlGrowthSm$fd, 2), xlab="age",
ylab="growth acceleration (cm / year^2)",
main="Girls in Berkeley Growth Study" )
##
## Simple basis
##
bspl1.2 <- create.bspline.basis(norder=1, breaks=c(0,.5, 1))
plot(bspl1.2)
# 2 bases, order 1 = degree 0 = step functions:
# (1) constant 1 between 0 and 0.5 and 0 otherwise
# (2) constant 1 between 0.5 and 1 and 0 otherwise.
fd1.2 <- Data2fd(0:1, basisobj=bspl1.2)
op <- par(mfrow=c(2,1))
plot(bspl1.2, main='bases')
plot(fd1.2, main='fit')
par(op)
# A step function:  0 to time=0.5, then 1 after
x11()
plot(bspl1.2, main='bases')
plot(fd1.2, main='fit')
par(op)
girlGrowthSm <- with(growth, smooth.basisPar(argvals=age, y=hgtf, lambda=0.1))
x11()
plot(girlGrowthSm$fd, xlab="age", ylab="height (cm)",
main="Girls in Berkeley Growth Study" )
plot(deriv(girlGrowthSm$fd), xlab="age", ylab="growth rate (cm / year)",
main="Girls in Berkeley Growth Study" )
plot(deriv(girlGrowthSm$fd, 2), xlab="age",
ylab="growth acceleration (cm / year^2)",
main="Girls in Berkeley Growth Study" )
girlGrowthSm <- with(growth, smooth.basisPar(argvals=age, y=hgtf, lambda=0.1))
x11()
plot(girlGrowthSm$fd, xlab="age", ylab="height (cm)",
main="Girls in Berkeley Growth Study" )
x11()
plot(deriv(girlGrowthSm$fd), xlab="age", ylab="growth rate (cm / year)",
main="Girls in Berkeley Growth Study" )
x11()
plot(deriv(girlGrowthSm$fd, 2), xlab="age",
ylab="growth acceleration (cm / year^2)",
main="Girls in Berkeley Growth Study" )
girlGrowthSm$fd
girlGrowthSm
setwd("C:/Users/Luca/Desktop/Applied-Statistics-2019-master/Applied-Statistics-2019-master/data")
library(plyr)
library(dplyr)
library(mvtnorm)
library(rgl)
library(car)
library(MASS)
library(useful)
df_sample_normalized_T1T2T3T4 = read.table('../data/df_sample_normalized_percentages_as_features.txt')
library(fdatest)
help("fdatest")
T1T2T3T4.result <- ITP1fourier(df_sample_normalized_T1T2T3T4[,4:47],maxfrequency=10,B=1000)
x11()
plot(T1T2T3T4.result)
x11()
plot(T1T2T3T4.result)
data("NASAtemp")
ITP.result <- ITP1fourier(NASAtemp$milan,maxfrequency=10,B=1000)
x11()
plot(ITP.result)
ITPimage(ITP.result)
x11()
ITPimage(ITP.result)
which(ITP.result$corrected.pval < 0.05)
ITP.result <- ITP2bspline(NASAtemp$milan,NASAtemp$paris,nknots=20,B=1000)
# Plotting the results of the ITP
plot(ITP.result)
ITPimage(ITP.result)
# Selecting the significant components for the radius at 5% level
which(ITP.result$corrected.pval < 0.05)
# Plotting the results of the ITP
x11()
plot(ITP.result)
# Plotting the p-values heatmap
x11()
ITPimage(ITP.result)
###########################################################################
T1T2T3T4.result <- ITP1fourier(df_sample_normalized_T1T2T3T4[,4:14])
x11()
plot(T1T2T3T4.result)
T1T2T3T4.result_T1 <- ITP1fourier(df_sample_normalized_T1T2T3T4[,4:14])
T1T2T3T4.result_T2 <- ITP1fourier(df_sample_normalized_T1T2T3T4[,15:25])
T1T2T3T4.result_T3 <- ITP1fourier(df_sample_normalized_T1T2T3T4[,26:36])
T1T2T3T4.result_T4 <- ITP1fourier(df_sample_normalized_T1T2T3T4[,37:47])
x11()
plot(T1T2T3T4.result_T1)
x11()
plot(T1T2T3T4.result_T2)
x11()
plot(T1T2T3T4.result_T3)
x11()
plot(T1T2T3T4.result_T4)
x11()
plot(T1T2T3T4.result_T2)
