colnames(df_sample_normalized_T1) = c('sample','diphtong','speaker','T1_0%','T1_10%','T1_20%','T1_30%','T1_40%',
'T1_50%','T1_60%','T1_70%','T1_80%','T1_90%', 'T1_100%')
colnames(df_sample_normalized_T2) = c('sample','diphtong','speaker','T2_0%','T2_10%','T2_20%','T2_30%','T2_40%',
'T2_50%','T2_60%','T2_70%','T2_80%','T2_90%', 'T2_100%')
colnames(df_sample_normalized_T3) = c('sample','diphtong','speaker','T3_0%','T3_10%','T3_20%','T3_30%','T3_40%',
'T3_50%','T3_60%','T3_70%','T3_80%','T3_90%', 'T3_100%')
colnames(df_sample_normalized_T4) = c('sample','diphtong','speaker','T4_0%','T4_10%','T4_20%','T4_30%','T4_40%',
'T4_50%','T4_60%','T4_70%','T4_80%','T4_90%', 'T4_100%')
##CREATION OF THE MATRIX WITH NORMALIZED DATA FOR ALL THE FORMANTS
df_sample_normalized_T1T2T3T4 = df_sample[,1:3]
for (i in c(1:186)){
df_sample_normalized_T1T2T3T4[i,4:14] = df_sample_normalized_T1[i,4:14]
df_sample_normalized_T1T2T3T4[i,15:25] = df_sample_normalized_T2[i,4:14]
df_sample_normalized_T1T2T3T4[i,26:36] = df_sample_normalized_T3[i,4:14]
df_sample_normalized_T1T2T3T4[i,37:47] = df_sample_normalized_T4[i,4:14]
}
colnames(df_sample_normalized_T1T2T3T4) = c('sample','diphtong','speaker','T1_0%','T1_10%','T1_20%','T1_30%','T1_40%',
'T1_50%','T1_60%','T1_70%','T1_80%','T1_90%', 'T1_100%', 'T2_0%','T2_10%','T2_20%','T2_30%','T2_40%',
'T2_50%','T2_60%','T2_70%','T2_80%','T2_90%', 'T2_100%', 'T3_0%','T3_10%','T3_20%','T3_30%','T3_40%',
'T3_50%','T3_60%','T3_70%','T3_80%','T3_90%', 'T3_100%', 'T4_0%','T4_10%','T4_20%','T4_30%','T4_40%',
'T4_50%','T4_60%','T4_70%','T4_80%','T4_90%', 'T4_100%')
### ratio for the whole dataset
x11(width = 10)
par(mar = c(4.1, 4.1, 4.1, 2.1), mfrow = c(3,4))
for (perc in c(1:11)){
plot(df_sample_normalized_T2[,-(1:3)][,perc] / df_sample_normalized_T1[,-(1:3)][,perc], col = col.diphtongs,
pch = 19, ylim = c(0,12),
xlab = 'Index', ylab = 'Ratio T2/T1',
main = paste('Ratio T2/T1 at ', (perc-1)*10, '%', sep=''))
}
### ratio for given speaker
spkr = 'M'
x11(width = 10)
par(mar = c(4.1, 4.1, 4.1, 2.1), mfrow = c(3,4))
for (perc in c(1:11)){
plot(filter(df_sample_normalized_T2, speaker == spkr)[,-(1:3)][,perc] /
filter(df_sample_normalized_T1, speaker == spkr)[,-(1:3)][,perc], col = col.diphtongs,
pch = 19, ylim = c(0,12),
xlab = 'Index', ylab = 'Ratio T2/T1',
main = paste(ifelse(spkr == 'F', 'Female','Male'),' Ratio T2/T1 at ', (perc-1)*10, '%', sep=''))
}
###SISTEMARE I COLORI!!!
### ratio for given diphtong
diph = 'aU'
x11(width = 10)
par(mar = c(4.1, 4.1, 4.1, 2.1), mfrow = c(3,4))
for (perc in c(1:11)){
plot(filter(df_sample_normalized_T2, diphtong == diph)[,-(1:3)][,perc] /
filter(df_sample_normalized_T1, diphtong == diph)[,-(1:3)][,perc], col = col.speakers,
pch = 19, ylim = c(0,12),
xlab = 'Index', ylab = 'Ratio T2/T1',
main = paste('Ratio T2/T1 for ', diph ,' at ', (perc-1)*10, '%', sep=''))
}
### ratio given a speaker and a diphtong
spkr = 'M'
diph = 'OY'
col_diph = mapvalues(diph, c('aI', 'aU', 'OY'), c('red','green','blue'))
x11(width = 10)
par(mar = c(4.1, 4.1, 4.1, 2.1), mfrow = c(3,4))
for (perc in c(1:11)){
plot(filter(df_sample_normalized_T2, speaker==spkr, diphtong == diph)[,-(1:3)][,perc] /
filter(df_sample_normalized_T1, speaker==spkr, diphtong == diph)[,-(1:3)][,perc], col = col_diph,
pch = 19, ylim = c(0,12),
xlab = 'Index', ylab = 'Ratio T2/T1',
main = paste(ifelse(spkr == 'F', 'Female','Male'),' Ratio T2/T1 for ' , diph , ' at ', (perc-1)*10, '%', sep=''))
}
graphics.off()
write.table(df_sample_normalized_T1T2T3T4, "C:/Users/giaco/Documents/Università/AppliedStatistics/Project/df_sample_normalized_T1T2T3T4.txt")
dat <- read.table("C:/Users/giaco/Documents/Università/AppliedStatistics/Project/df_sample_normalized_T1T2T3T4.txt")
rm(list = ls())
dat <- read.table("C:/Users/giaco/Documents/Università/AppliedStatistics/Project/df_sample_normalized_T1T2T3T4.txt")
dat
View(dat)
header <- dat[,(1:3)]
dat <- dat[,-(1:3)]
dat <- data.frame(header[2], dat)
dat_m <- dat[(1:93),]
dat_f <- dat[(94:186),]
aI_vs_aU_m <- dat_m %>% filter(diphtong == "aI" | diphtong == "aU")
length(aI_vs_aU_m)
length(aI_vs_aU_m[,])
length(aI_vs_aU_m[,1])
i=1
aI_vs_aU_m[1,i]
lbl <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[1,i] == "aI") {
lbl <- c(lbl, 1)
} else {
lbl <- c(lbl, -1)
}
}
View(aI_vs_aU_m)
aI_vs_aU_m[1,i]
i=2
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl <- c(lbl, 1)
} else {
lbl <- c(lbl, -1)
}
}
lbl <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl <- c(lbl, 1)
} else {
lbl <- c(lbl, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl, aI_vs_aU_m)
View(aI_vs_aU_m)
library(e1071)
View(aI_vs_aU_m)
tune1 <- tune(svm, lbl~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
tune1
summary(tune1)
best1 <- tune1$best.model
summery(best1)
summary(best1)
aI_vs_OY_m <- dat_m %>% filter(diphtong == "aI" | diphtong == "OY")
lbl2 <- c()
for(i in (1:length(aI_vs_OY_m[,1]))) {
if(aI_vs_OY_m[i,1] == "aI") {
lbl2 <- c(lbl, 1)
} else {
lbl2 <- c(lbl, -1)
}
}
aI_vs_OY_m <- aI_vs_OY_m[,-1]
aI_vs_OY_m <- data.frame(lbl2, aI_vs_OY_m)
attach(aI_vs_OY_m)
tune2 <- tune(svm, lbl2~., data = aI_vs_OY_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune2)
best2 <- tune2$best.model
summary(best2)
View(aI_vs_OY_m)
View(aI_vs_aU_m)
aI_vs_OY_m <- data.frame(lbl2, aI_vs_OY_m)
aI_vs_OY_m <- dat_m %>% filter(diphtong == "aI" | diphtong == "OY")
lbl2 <- c()
for(i in (1:length(aI_vs_OY_m[,1]))) {
if(aI_vs_OY_m[i,1] == "aI") {
lbl2 <- c(lbl2, 1)
} else {
lbl2 <- c(lbl2, -1)
}
}
aI_vs_OY_m <- aI_vs_OY_m[,-1]
aI_vs_OY_m <- data.frame(lbl2, aI_vs_OY_m)
attach(aI_vs_OY_m)
tune2 <- tune(svm, lbl2~., data = aI_vs_OY_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune2)
best2 <- tune2$best.model
summary(best2)
aU_vs_OY_m <- dat_m %>% filter(diphtong == "aU" | diphtong == "OY")
lbl3 <- c()
for(i in (1:length(aU_vs_OY_m[,1]))) {
if(aU_vs_OY_m[i,1] == "aU") {
lbl3 <- c(lbl3, 1)
} else {
lbl3 <- c(lbl3, -1)
}
}
aU_vs_OY_m <- aU_vs_OY_m[,-1]
aU_vs_OY_m <- data.frame(lbl3, aU_vs_OY_m)
attach(aU_vs_OY_m)
tune3 <- tune(svm, lbl3~., data = aU_vs_OY_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune3)
best3 <- tune3$best.model
summary(best3)
aI <- dat_m %>% filter(diphtong == "aI")
aU <- dat_m %>% filter(diphtong == "aU")
OY <- dat_m %>% filter(diphtong == "OY")
length(aI[,1]
length(aI[,1])
length(aI[,1])
test_aI <- c(sample(1:length(aI[,1]), 10))
sort(test_aI)
test_aI <- sort(test_aI)
for(i in 1:length(test_aI)) {
test_aI[i] <- aI[test_aI[i]]
}
support <- c(sample(1:length(aI[,1]), 10))
support <- sort(support)
View(aI)
support <- c(sample(1:(length(aI[,1])/2), 10))
all_dat <- read.table("C:/Users/giaco/Documents/Università/AppliedStatistics/Project/df_sample_normalized_T1T2T3T4.txt")
aI <- all_dat %>% filter(diphtong == "aI")
aU <- all_dat %>% filter(diphtong == "aU")
OY <- all_dat %>% filter(diphtong == "OY")
support <- c(sample(1:(length(aI[,1])/2), 10))
support <- sort(support)
for(i in 1:length(test_aI)) {
support <- aI[support[i],1]
}
support <- c(sample(1:(length(aI[,1])/2), 10))
support <- sort(support)
for(i in 1:length(test_aI)) {
support[i] <- aI[support[i],1]
}
View(aI)
View(all_dat)
aI_m <- all_dat %>% filter(diphtong == "aI" & speaker == "M")
aU_m <- all_dat %>% filter(diphtong == "aU" & speaker == "M")
OY_M <- all_dat %>% filter(diphtong == "OY" & speaker == "M")
test_aI <- sample_n(aI_m, 10)
View(test_aI)
train_aI <- aI_m %>% filter(-test_aI)
train_aI <- aI_m %>% filter(test_aI)
sort(test_aI)
test_aI <- data.frame(order(test_aI, test_aI$sample))
test_aI <- order(test_aI, test_aI$sample))
test_aI <- order(test_aI$sample))
test_aI <- order(test_aI$sample)
test_aI <- order(test_aI, test_aI$sample)
test_aI <- sample_n(aI_m, 10)
test_aI <- order(test_aI, test_aI$sample)
View(OY_M)
attach(test_aI)
test_aI <- test_aI[order(sample),]
View(test_aI)
detach(test_aI)
test_aI <- sample_n(aI_m, 10)
View(test_aI)
test_aI <- test_aI[order(test_aI$sample),]
r <- c()
k <- 1
for(i in 1:length(aI_m)) {
if(aI_m[i,1] == test_aI[k]) {
r <- c(r, F)
} else {
if(aI_m[i,1] < test_aI[k]) {
r <- c(r, T)
} else {
k <- k + 1
}
}
}
r <- c(F, T, F)
r <- c(r, T)
r <- c()
k <- 1
aI_m[i,1]
test_aI[k]
train_aI <- aI_m %>% filter(sample !%in% test_aI$sample)
train_aI <- aI_m %>% filter(!(sample %in% test_aI$sample))
test_aU <- sample_n(aU_m, 4)
test_OY <- sample_n(OY_m, 2)
aU_m <- all_dat %>% filter(diphtong == "aU" & speaker == "M")
OY_M <- all_dat %>% filter(diphtong == "OY" & speaker == "M")
test_aU <- sample_n(aU_m, 4)
test_OY <- sample_n(OY_m, 2)
train_aU <- aI_m %>% filter(!(sample %in% test_aI$sample))
train_OY <- aI_m %>% filter(!(sample %in% test_aI$sample))
aI_vs_aU_m <- rbind(train_aI, train_aU)
# FIRST SVM -------------------------------
rm(aI_vs_aU_m)
aI_vs_aU_m <- rbind(train_aI, train_aU)
View(aI_vs_aU_m)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI | sample %in% train_aU)
# FIRST SVM -------------------------------
rm(aI_vs_aU_m)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI | sample %in% train_aU)
View(dat_m)
dat_m <- all_dat[(1:93),]
dat_f <- all_dat[(94:186),]
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI | sample %in% train_aU)
View(dat_m)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI | sample %in% train_aU)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI | sample %in% train_aU)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
View(aI_vs_aU_m)
aI_m <- all_dat %>% filter(diphtong == "aI" & speaker == "M")
aU_m <- all_dat %>% filter(diphtong == "aU" & speaker == "M")
OY_M <- all_dat %>% filter(diphtong == "OY" & speaker == "M")
test_aI <- sample_n(aI_m, 10)
test_aU <- sample_n(aU_m, 4)
test_OY <- sample_n(OY_m, 2)
#test_aI <- test_aI[order(test_aI$sample),]
#test_aU <- test_aU[order(test_aU$sample),]
#test_OY <- test_OY[order(test_OY$sample),]
train_aI <- aI_m %>% filter(!(sample %in% test_aI$sample))
train_aU <- aI_m %>% filter(!(sample %in% test_aU$sample))
train_OY <- aI_m %>% filter(!(sample %in% test_OY$sample))
aI_m <- all_dat %>% filter(diphtong == "aI" & speaker == "M")
aU_m <- all_dat %>% filter(diphtong == "aU" & speaker == "M")
OY_m <- all_dat %>% filter(diphtong == "OY" & speaker == "M")
test_aI <- sample_n(aI_m, 10)
test_aU <- sample_n(aU_m, 4)
test_OY <- sample_n(OY_m, 2)
#test_aI <- test_aI[order(test_aI$sample),]
#test_aU <- test_aU[order(test_aU$sample),]
#test_OY <- test_OY[order(test_OY$sample),]
train_aI <- aI_m %>% filter(!(sample %in% test_aI$sample))
train_aU <- aI_m %>% filter(!(sample %in% test_aU$sample))
train_OY <- aI_m %>% filter(!(sample %in% test_OY$sample))
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_m <- all_dat %>% filter(diphtong == "aI" & speaker == "M")
aU_m <- all_dat %>% filter(diphtong == "aU" & speaker == "M")
OY_m <- all_dat %>% filter(diphtong == "OY" & speaker == "M")
test_aI <- sample_n(aI_m, 10)
test_aU <- sample_n(aU_m, 4)
test_OY <- sample_n(OY_m, 2)
#test_aI <- test_aI[order(test_aI$sample),]
#test_aU <- test_aU[order(test_aU$sample),]
#test_OY <- test_OY[order(test_OY$sample),]
train_aI <- aI_m %>% filter(!(sample %in% test_aI$sample))
train_aU <- aU_m %>% filter(!(sample %in% test_aU$sample))
train_OY <- OY_m %>% filter(!(sample %in% test_OY$sample))
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_OY_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_OY$sample)
aU_vs_OY_m <- dat_m %>% filter(sample %in% train_aU$sample | sample %in% train_OY$sample)
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_OY_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_OY$sample)
lbl2 <- c()
for(i in (1:length(aI_vs_OY_m[,1]))) {
if(aI_vs_OY_m[i,1] == "aI") {
lbl2 <- c(lbl2, 1)
} else {
lbl2 <- c(lbl2, -1)
}
}
aI_vs_OY_m <- aI_vs_OY_m[,-1]
aI_vs_OY_m <- data.frame(lbl2, aI_vs_OY_m)
attach(aI_vs_OY_m)
tune2 <- tune(svm, lbl2~., data = aI_vs_OY_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune2)
best2 <- tune2$best.model
summary(best2)
aU_vs_OY_m <- dat_m %>% filter(sample %in% train_aU$sample | sample %in% train_OY$sample)
lbl3 <- c()
for(i in (1:length(aU_vs_OY_m[,1]))) {
if(aU_vs_OY_m[i,1] == "aU") {
lbl3 <- c(lbl3, 1)
} else {
lbl3 <- c(lbl3, -1)
}
}
aU_vs_OY_m <- aU_vs_OY_m[,-1]
aU_vs_OY_m <- data.frame(lbl3, aU_vs_OY_m)
attach(aU_vs_OY_m)
tune3 <- tune(svm, lbl3~., data = aU_vs_OY_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune3)
best3 <- tune3$best.model
summary(best3)
aI_vs_aU_m <- aI_vs_aU_m[,-1:3]
aI_vs_aU_m <- aI_vs_aU_m[,-(1:3)]
aI_vs_aU_m <- data.frame(header[2], aI_vs_aU_m)
View(aI_vs_aU_m)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-(1:3)]
aI_vs_aU_m <- data.frame(header[2], aI_vs_aU_m)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-1] <- aI_vs_aU_m[,-3]
View(aI_vs_aU_m)
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
summary(tune1)
best1 <- tune1$best.model
summary(best1)
aI_vs_aU_m <- dat_m %>% filter(sample %in% train_aI$sample | sample %in% train_aU$sample)
aI_vs_aU_m <- aI_vs_aU_m[,-3]
aI_vs_aU_m <- aI_vs_aU_m[,-1]
lbl1 <- c()
for(i in (1:length(aI_vs_aU_m[,1]))) {
if(aI_vs_aU_m[i,1] == "aI") {
lbl1 <- c(lbl1, 1)
} else {
lbl1 <- c(lbl1, -1)
}
}
aI_vs_aU_m <- aI_vs_aU_m[,-1]
aI_vs_aU_m <- data.frame(lbl1, aI_vs_aU_m)
attach(aI_vs_aU_m)
tune1 <- tune(svm, lbl1~., data = aI_vs_aU_m, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 10, 100)))
